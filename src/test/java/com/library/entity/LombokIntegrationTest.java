package com.library.entity;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@ActiveProfiles("test")
class LombokIntegrationTest {

    @Test
    void bookEntity_shouldHaveAllLombokGeneratedMethods_whenCreated() {
        //given
        Book book = new Book("Test Book", "Test Author", "1234567890");
        
        //when
        book.setId(1L);
        book.setBorrowerId(2L);
        
        //then
        assertThat(book.getId()).isEqualTo(1L);
        assertThat(book.getTitle()).isEqualTo("Test Book");
        assertThat(book.getAuthor()).isEqualTo("Test Author");
        assertThat(book.getIsbn()).isEqualTo("1234567890");
        assertThat(book.getBorrowerId()).isEqualTo(2L);
        assertThat(book.getAvailable()).isFalse(); // Should be false when borrowerId is set
        assertThat(book.toString()).contains("Test Book", "Test Author", "1234567890");
    }

    @Test
    void borrowerEntity_shouldHaveAllLombokGeneratedMethods_whenCreated() {
        //given
        Borrower borrower1 = new Borrower("John Doe", "john@example.com");
        Borrower borrower2 = new Borrower("John Doe", "john@example.com");
        
        //when
        borrower1.setId(1L);
        
        //then
        assertThat(borrower1.getId()).isEqualTo(1L);
        assertThat(borrower1.getName()).isEqualTo("John Doe");
        assertThat(borrower1.getEmail()).isEqualTo("john@example.com");
        assertThat(borrower1.toString()).contains("John Doe", "john@example.com");
        
        // Test equals and hashCode (generated by @Data)
        assertThat(borrower1).isNotEqualTo(borrower2); // Different IDs
        borrower2.setId(1L);
        assertThat(borrower1).isEqualTo(borrower2); // Same data
        assertThat(borrower1.hashCode()).isEqualTo(borrower2.hashCode());
    }

    @Test
    void bookEntity_shouldAutomaticallySetAvailable_whenBorrowerIdChanges() {
        //given
        Book book = new Book("Test Book", "Test Author", "1234567890");
        
        //when - set borrower
        book.setBorrowerId(1L);
        
        //then
        assertThat(book.getAvailable()).isFalse();
        assertThat(book.getBorrowerId()).isEqualTo(1L);
        
        //when - remove borrower
        book.setBorrowerId(null);
        
        //then
        assertThat(book.getAvailable()).isTrue();
        assertThat(book.getBorrowerId()).isNull();
    }
}